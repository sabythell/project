import time
import threading
import re
import sys
import os
import pyfiglet

class World():
    def __init__(self):
        thread_1 = threading.Thread(target=self.clock, daemon = True).start()
        thread_2 = threading.Thread(target=self.check_time, daemon = True).start()


    def clock(self):
        self.minutes = 360
        self.total_minutes = 4680
        while self.minutes != self.total_minutes:
            time.sleep(1)
            self.minutes += 1

    def check_time(self):
        if (self.minutes >= 360 and self.minutes < 1080) or (self.minutes >= 1800 and self.minutes < 2520) or (self.minutes >= 3240 and self.minutes < 3960):
            self.emoji = 'ðŸŒž'
        else:
            self.emoji = 'ðŸŒ™'
        while True:
            if self.minutes == 360:
                os.system("clear")
                self.dawn_of_the_first_day()
                self.menu()
            elif self.minutes == 1080:
                os.system("clear")
                self.night_of_the_first_day()
                self.menu()
            elif self.minutes == 1800:
                os.system("clear")
                self.dawn_of_the_second_day()
                self.menu()
            elif self.minutes == 2520:
                os.system("clear")
                self.night_of_the_second_day()
                self.menu()
            elif self.minutes == 3240:
                os.system("clear")
                self.dawn_of_the_final_day()
                self.menu()
            elif self.minutes == 3960:
                os.system("clear")
                self.night_of_the_final_day()
                self.menu()
            elif self.minutes == self.total_minutes:
                break
        self.game_over()

    def set_emoji(self, emoji):
        self.emoji = emoji

    def dawn_of_the_first_day(self):
        os.system('clear')
        text = "Dawn of the First Day"
        print(pyfiglet.figlet_format(text, width =250))
        print("")
        print("-----------------------------------------72 hours remain------------------------------------------")
        time.sleep(3)
        world.minutes = 360
        os.system('clear')
        #return None

    def night_of_the_first_day(self):
        os.system('clear')
        text = "Night of the First Day"
        print(pyfiglet.figlet_format(text, width =250))
        print("")
        print("------------------------------------------60 hours remain------------------------------------------")
        time.sleep(3)
        world.minutes = 1080
        os.system('clear')
        return None

    def dawn_of_the_second_day(self):
        os.system('clear')
        text = "Dawn of the Second Day"
        print(pyfiglet.figlet_format(text, width =250))
        print("")
        print("------------------------------------------48 hours remain------------------------------------------")
        time.sleep(3)
        world.minutes = 1800
        os.system('clear')
        return None

    def night_of_the_second_day(self):
        os.system('clear')
        text = "Night of the Second Day"
        print(pyfiglet.figlet_format(text, width =250))
        print("")
        print("------------------------------------------36 hours remain------------------------------------------")
        time.sleep(3)
        world.minutes = 2520
        os.system('clear')
        return None

    def dawn_of_the_final_day(self):
        os.system('clear')
        text = "Dawn of the Final Day"
        print(pyfiglet.figlet_format(text, width =250))
        print("")
        print("------------------------------------------24 hours remain------------------------------------------")
        time.sleep(3)
        world.minutes = 3240
        os.system('clear')
        return None

    def night_of_the_final_day(self):
        os.system('clear')
        text = "Night of the Final Day"
        print(pyfiglet.figlet_format(text, width =250))
        print("")
        print("------------------------------------------12 hours remain------------------------------------------")
        time.sleep(3)
        world.minutes = 3960
        os.system('clear')
        return None

    def menu(self):
        os.system('clear')
        print("-----Majora Time Mechanic-----")
        print("by Sam Alderson-Bythell")
        print("")
        print("Type 1 and press enter to view the current time and day")
        print("Type 2 and press enter to equip the Ocarina of Time")
        print("Type 3 and press enter to exit the program")
        print("")
        i = input()
        if i == "1":
            viewtime = 3
            while viewtime != 0:
                os.system('clear')
                print(world.get_time())
                print("")
                print("")
                print("")
                sundial()
                time.sleep(1)
                viewtime -= 1
                if viewtime == 0:
                    self.menu()

        elif i == "2":
            self.ocarina_of_time()

        elif i == "3":
            os.system('clear')
            sys.exit("Thank you, Goodbye!")
        '''if i != "1" or i != "2" or i != "3":
            menu()'''

    def ocarina_of_time(self):
        os.system('clear')
        print("----------Songs----------")
        print("")
        print("Song of Time: 'radrad'")
        print("Song of Skip Time: 'rrddaa'")
        print("Song of Inverted Time: 'dardar'")
        print("Type 'm' and press enter to return to the previous menu")
        print("")
        song_input = input()
        if song_input.lower() == "radrad":
            ...
        elif song_input.lower() == "rrddaa":
            ...
        elif song_input.lower() == "dardar":
            ...
        elif song_input.lower() == "m":
            song_input = None
            self.menu()
        else:
            print("Input not recognised")
            time.sleep(1)
            self.ocarina_of_time()

    def game_over(self):
        os.system('clear')
        text = "GAME OVER"
        print(pyfiglet.figlet_format(text, width =250))
        i = input("Please press enter to quit")
        while True:
            if i == "":
                sys.exit()
            else:
                pass

    def get_day(self):
        if self.minutes >= 0 and self.minutes < 1440:
            return "First Day"
        elif self.minutes >= 1440 and self.minutes < 2880:
            return "Second Day"
        else:
            return "Final Day"

    def get_hour(self):
        h = str(self.minutes/60)
        match = re.match(r"(.+)\..+", h)
        return int(match.group(1))

    def get_minute(self):
        return int(self.minutes)%60

    def format_hour(self, hour):
        epoch = self.get_epoch()
        if hour >= 24 and hour < 48:
            hour -= 24
        elif hour >= 48 and hour < 72:
            hour -= 48
        elif hour >= 72:
            hour -= 72
        if hour > 12 and epoch == "PM":
            hour -= 12
        return hour

    def get_epoch(self):
        hour = self.get_hour()
        if hour < 12 or (hour >= 24 and hour <36) or (hour >= 48 and hour <60) or hour >= 72:
            return "AM"
        else:
            return "PM"

    def get_time(self):
        hour = self.get_hour()
        minute = self.get_minute()
        epoch = self.get_epoch()
        day = self.get_day()
        hour = self.format_hour(hour)

        if self.minutes == self.total_minutes:
            self.game_over = True
            return "GAME OVER"
        else:
            return f"{day} {hour:02}:{minute:02} {epoch}"

'''class Menu(self):
    def __init__(self):
        ...

    def'''

def get_input():
    i = input("")
    return i

def main():
    global world
    world = World()
    world.menu()

def sundial():
    hour = int(world.get_hour())
    hour = world.format_hour(hour)
    emoji = world.emoji
    if emoji == 'ðŸŒž':
        print(f"{emoji if hour == 6 else 6}-{emoji if hour == 7 else 7}-{emoji if hour == 8 else 8}-{emoji if hour == 9 else 9}-{emoji if hour == 10 else 10}-{emoji if hour == 11 else 11}-{emoji if hour == 12 else 12}-{emoji if hour == 1 else 1}-{emoji if hour == 2 else 2}-{emoji if hour == 3 else 3}-{emoji if hour == 4 else 4}-{emoji if hour == 5 else 5}-{emoji if hour == 6 else 6}")
    elif emoji == 'ðŸŒ™':
        if hour == 0:
            hour = 12
        print(f"{emoji if hour == 6 else 6}-{emoji if hour == 7 else 7}-{emoji if hour == 8 else 8}-{emoji if hour == 9 else 9}-{emoji if hour == 10 else 10}-{emoji if hour == 11 else 11}-{emoji if hour == 12 else 12}-{emoji if hour == 1 else 1}-{emoji if hour == 2 else 2}-{emoji if hour == 3 else 3}-{emoji if hour == 4 else 4}-{emoji if hour == 5 else 5}-{emoji if hour == 6 else 6}")


'''def menu():
    i = None
    os.system('clear')
    print("-----Majora Time Mechanic-----")
    print("by Sam Alderson-Bythell")
    print("")
    print("Type 1 and press enter to view the current time and day")
    print("Type 2 and press enter to equip the Ocarina of Time")
    print("Type 3 and press enter to exit the program")
    print("")
    i = get_input()
    if i == "1":
        viewtime = 3
        while viewtime != 0:
            os.system('clear')
            print(world.get_time())
            print("")
            print("")
            print("")
            sundial()
            time.sleep(1)
            viewtime -= 1
            if viewtime == 0:
                menu()

    elif i == "2":
        ocarina_of_time()

    elif i == "3":
        os.system('clear')
        sys.exit("Thank you, Goodbye!")
    if i != "1" or i != "2" or i != "3":
        menu()'''

'''def ocarina_of_time():
    os.system('clear')
    print("----------Songs----------")
    print("")
    print("Song of Time: 'radrad'")
    print("Song of Skip Time: 'rrddaa'")
    print("Song of Inverted Time: 'dardar'")
    print("Type 'm' and press enter to return to the previous menu")
    print("")
    song_input = get_input()
    if song_input.lower() == "radrad":
        ...
    elif song_input.lower() == "rrddaa":
        ...
    elif song_input.lower() == "dardar":
        ...
    elif song_input.lower() == "m":
        song_input = None
        world.menu()
    else:
        print("Input not recognised")
        time.sleep(1)
        ocarina_of_time()'''


if __name__ == "__main__":
    main()
